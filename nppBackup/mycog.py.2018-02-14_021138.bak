import discord
from discord.ext import commands
from enum import Enum
import random

class Mycog:

    def __init__(self, bot):
        self.bot = bot
        buildHeroTables(self)
        buildItemTables(self)
        buildHandicaps(self)
        
    @commands.command(pass_context=True)        
    async def hc(self, ctx, handicapValue):
        user = ctx.message.author
        strings = getHandicapStrings(self, int(handicapValue), user)
        for s in strings:
            await self.bot.say(s)
        
    @commands.command(pass_context=True)
    async def dc(self, ctx):
        user = ctx.message.author
        name,hero = selectHero(self)
        await self.bot.say(user.mention + " got " + name)
        buildItems = selectItems(self, 6)
        await self.bot.say(user.mention + " Your items are " + buildItems[0].name + ", " + buildItems[1].name + ", " + buildItems[2].name + ", " + buildItems[3].name + ", " + buildItems[4].name + ", and " + buildItems[5].name)
        costs = 0
        for item in buildItems:
            costs += item.cost
        await self.bot.say(user.mention + " Total Cost: " + str(costs))

    @commands.command(pass_context=True)
    async def randomhero(self, ctx):
        user = ctx.message.author
        name,hero = selectHero(self)
        await self.bot.say(user.mention + " got " + name)
       
    @commands.command(pass_context=True)
    async def randomitems(self, ctx):
        user = ctx.message.author
        buildItems = selectItems(self, 6)
        await self.bot.say(user.mention + " Your items are " + buildItems[0].name + ", " + buildItems[1].name + ", " + buildItems[2].name + ", " + buildItems[3].name + ", " + buildItems[4].name + ", and " + buildItems[5].name)
        costs = 0
        for item in buildItems:
            costs += item.cost
        await self.bot.say(user.mention + " Total Cost: " + str(costs))

def setup(bot):
    bot.add_cog(Mycog(bot))

def selectHero(self):
    return random.choice(list(self.heroes.items()))
    
def getHandicapStrings(self, value, user):
    strings = []
    strings.append(user.mention + " needs " + str(value) + " points")
    list = subset_sum(self, self.handicaps.copy(), value, [])
    for i in list:
        strings.append(user.mention + " ("+ str(i.value) + ") " + i.text)
    return strings
    
#Builds the handicap list.
def subset_sum(self, handicaps, target, list=[], partial_sum=0):
    #print(target)
    #print(partial_sum)
    #print(list)
    #Check to see if we're done.
    if partial_sum == target:
        return list
        
    #Now go through our handicap list and remove anything that we can't use to get to the target.
    for i in handicaps:
        if i.value > target-partial_sum:
            print(i.value)
            print(target-partial_sum)
            handicaps.remove(i)
            
    #If our available handicap list is empty now, we don't have anything available to fill, so pop a random item and recurse with the full handicap list
    if len(handicaps) == 0:
        toRemove = random.choice(list)
        print(toRemove)
        list.remove(toRemove)
        #recurse into the set of handicaps
        return subset_sum(self, sorted(self.handicaps, key=value, reverse=True), target, list, partial_sum-toRemove.value)
    else:
        #We can get a valid one, so randomly pick and add it.
        toAppend = random.choice(handicaps)
        list.append(toAppend)
        partial_sum += toAppend.value
        return subset_sum(self, handicaps, target, list, partial_sum)
 
#Select a random list of <num> items for a build
#If num is 6, guaranteed to contain at least one pair of boots.
#If num is less than 6, may or may not have a pair of boots. Chance is 1-(1/6)^num.
def selectItems(self, num):
    randItems = list()
    count = 0
    hasBoots = False
    #Create a destructible list of items we can pop to avoid dupes.
    aux = list(self.items.values())
    while count < num:
        #If we hit our roll, and don't have a pair of boots, add them
        if random.randint(1,6) == 6 and hasBoots == False:
            addItem = random.choice(list(self.boots.values()))
            hasBoots = True
        #If we had 6 items, and got to the end without getting a pair of boots, add boots.
        elif num == 6 and count == 5 and hasBoots == False:
            addItem = random.choice(list(self.boots.values()))
            hasBoots = True
        #Otherwise, normal item
        else:
            addItem = aux.pop(random.randint(0,len(aux)-1))
        randItems.append(addItem)
        count+=1
    randItems.sort()
    return randItems
    
    
class Hero:
    def __init__(self, name, mainStat, melee, hasAghs, range):
        self.name = name
        self.mainStat = mainStat
        self.melee = melee
        self.range = range
        self.hasAghs = hasAghs
        
    def isMelee():
        return melee
        
    def isRanged():
        return not melee
    
class Item:
    def __init__(self, name, cost, tags):
        self.name = name
        self.cost = cost
        self.tags = tags
        
    def __eq__(self, other):
        return self.name == other.name and self.cost == other.cost
        
    def __lt__(self, other):
        if ItemTags.BOOTS in self.tags and ItemTags.BOOTS not in other.tags:
            return True
        elif ItemTags.BOOTS not in self.tags and ItemTags.BOOTS in other.tags:
            return False
        if self.cost < other.cost:
            return True
        elif self.cost > other.cost:
            return False
        if self.name < other.name:
            return True
        elif self.name > other.name:
            return False
        return False
        
class MainStat(Enum):
    STRENGTH=1
    AGILITY=2
    INTELLIGENCE=3
    
class ItemTags(Enum):
    ACTIVE=1
    CONSUMABLE=2
    BOOTS=3
    DEFENSIVE=4
    OFFENSIVE=5
    MELEE=6
    RANGED=7
    
def buildHeroTables(self):
    heroes = dict()
    
    #Strength Heroes
    heroes["Abbadon"]=Hero("Abbadon",MainStat.STRENGTH,True,True,150)
    heroes["Alchemist"]=Hero("Alchemist",MainStat.STRENGTH,True,False,150)
    heroes["Axe"]=Hero("Axe",MainStat.STRENGTH,True,True,150)
    heroes["Beastmaster"]=Hero("Beastmaster",MainStat.STRENGTH,True,True,150)
    heroes["Brewmaster"]=Hero("Brewmaster",MainStat.STRENGTH,True,True,150)
    heroes["Bristleback"]=Hero("Bristleback",MainStat.STRENGTH,True,True,150)
    heroes["Centaur Warrunner"]=Hero("Centaur Warrunner",MainStat.STRENGTH,True,True,150)
    heroes["Chaos Knight"]=Hero("Chaos Knight",MainStat.STRENGTH,True,True,150)
    heroes["Clockwerk"]=Hero("Clockwerk",MainStat.STRENGTH,True,True,150)
    heroes["Doom"]=Hero("Doom",MainStat.STRENGTH,True,True,150)
    heroes["Dragon Knight"]=Hero("Dragon Knight",MainStat.STRENGTH,True,False,150)
    heroes["Earth Spirit"]=Hero("Earth Spirit",MainStat.STRENGTH,True,True,150)
    heroes["Earthshaker"]=Hero("Earthshaker",MainStat.STRENGTH,True,True,150)
    heroes["Elder Titan"]=Hero("Elder Titan",MainStat.STRENGTH,True,True,150)
    heroes["Huskar"]=Hero("Huskar",MainStat.STRENGTH,False,True,400)
    heroes["Io"]=Hero("Io",MainStat.STRENGTH,False,True,575)
    heroes["Kunkka"]=Hero("Kunkka",MainStat.STRENGTH,True,True,150)
    heroes["Legion Commander"]=Hero("Legion Commander",MainStat.STRENGTH,True,True,150)
    heroes["Lifestealer"]=Hero("Lifestealer",MainStat.STRENGTH,True,True,150)
    heroes["Lycan"]=Hero("Lycan",MainStat.STRENGTH,True,False,150)
    heroes["Magnus"]=Hero("Magnus",MainStat.STRENGTH,True,True,150)
    heroes["Night Stalker"]=Hero("Night Stalker",MainStat.STRENGTH,True,True,150)
    heroes["Omniknight"]=Hero("Omniknight",MainStat.STRENGTH,True,True,150)
    heroes["Phoenix"]=Hero("Phoenix",MainStat.STRENGTH,False,True,500)
    heroes["Pudge"]=Hero("Pudge",MainStat.STRENGTH,True,True,150)
    heroes["Sand King"]=Hero("Sand King",MainStat.STRENGTH,True,True,150)
    heroes["Slardar"]=Hero("Slardar",MainStat.STRENGTH,True,False,150)
    heroes["Spirit Breaker"]=Hero("Spirit Breaker",MainStat.STRENGTH,True,True,150)
    heroes["Sven"]=Hero("Sven",MainStat.STRENGTH,True,True,150)
    heroes["Tidehunter"]=Hero("Tidehunter",MainStat.STRENGTH,True,True,150)
    heroes["Timbersaw"]=Hero("Timbersaw",MainStat.STRENGTH,True,True,150)
    heroes["Tiny"]=Hero("Tiny",MainStat.STRENGTH,True,False,150)
    heroes["Treant Protector"]=Hero("Treant Protector",MainStat.STRENGTH,True,True,150)
    heroes["Tusk"]=Hero("Tusk",MainStat.STRENGTH,True,True,150)
    heroes["Underlord"]=Hero("Underlord",MainStat.STRENGTH,True,False,150)
    heroes["Undying"]=Hero("Undying",MainStat.STRENGTH,True,True,150)
    heroes["Wraith King"]=Hero("Wraith King",MainStat.STRENGTH,True,True,150)
    #Agility Heroes
    heroes["Anti-Mage"]=Hero("Anti-Mage",MainStat.AGILITY,True,True,150)
    heroes["Arc Warden"]=Hero("Arc Warden",MainStat.AGILITY,False,False,625)
    heroes["Bloodseeker"]=Hero("Bloodseeker",MainStat.AGILITY,True,True,150)
    heroes["Bounty Hunter"]=Hero("Bounty Hunter",MainStat.AGILITY,True,True,150)
    heroes["Broodmother"]=Hero("Broodmother",MainStat.AGILITY,True,False,150)
    heroes["Clinkz"]=Hero("Clinkz",MainStat.AGILITY,False,False,640)
    heroes["Drow Ranger"]=Hero("Drow Ranger",MainStat.AGILITY,False,True,625)
    heroes["Ember Spirit"]=Hero("Ember Spirit",MainStat.AGILITY,True,False,150)
    heroes["Faceless Void"]=Hero("Faceless Void",MainStat.AGILITY,True,True,150)
    heroes["Gyrocopter"]=Hero("Gyrocopter",MainStat.AGILITY,False,True,365)
    heroes["Juggernaut"]=Hero("Juggernaut",MainStat.AGILITY,True,True,150)
    heroes["Lone Druid"]=Hero("Lone Druid",MainStat.AGILITY,False,True,550)
    heroes["Luna"]=Hero("Luna",MainStat.AGILITY,False,True,330)
    heroes["Medusa"]=Hero("Medusa",MainStat.AGILITY,False,True,600)
    heroes["Meepo"]=Hero("Meepo",MainStat.AGILITY,True,True,150)
    heroes["Mirana"]=Hero("Mirana",MainStat.AGILITY,False,True,630)
    heroes["Monkey King"]=Hero("Monkey King",MainStat.AGILITY,True,False,300)
    heroes["Morphling"]=Hero("Morphling",MainStat.AGILITY,False,False,350)
    heroes["Naga Siren"]=Hero("Naga Siren",MainStat.AGILITY,True,True,150)
    heroes["Nyx Assassin"]=Hero("Nyx Assassin",MainStat.AGILITY,True,True,150)
    heroes["Pangolier"]=Hero("Pangolier",MainStat.AGILITY,True,False,150)
    heroes["Phantom Assassin"]=Hero("Phantom Assassin",MainStat.AGILITY,True,False,150)
    heroes["Phantom Lancer"]=Hero("Phantom Lancer",MainStat.AGILITY,True,True,150)
    heroes["Razor"]=Hero("Razor",MainStat.AGILITY,False,True,475)
    heroes["Riki"]=Hero("Riki",MainStat.AGILITY,True,True,150)
    heroes["Shadow Fiend"]=Hero("Shadow Fiend",MainStat.AGILITY,False,True,500)
    heroes["Slark"]=Hero("Slark",MainStat.AGILITY,True,True,150)
    heroes["Sniper"]=Hero("Sniper",MainStat.AGILITY,False,True,550)
    heroes["Spectre"]=Hero("Spectre",MainStat.AGILITY,True,False,150)
    heroes["Templar Assassin"]=Hero("Templar Assassin",MainStat.AGILITY,False,False,140)
    heroes["Terrorblade"]=Hero("Terrorblade",MainStat.AGILITY,True,False,150)
    heroes["Troll Warlord"]=Hero("Troll Warlord",MainStat.AGILITY,True,False,150)
    heroes["Ursa"]=Hero("Ursa",MainStat.AGILITY,True,True,150)
    heroes["Vengeful Spirit"]=Hero("Vengeful Spirit",MainStat.AGILITY,True,True,150)
    heroes["Venomancer"]=Hero("Venomancer",MainStat.AGILITY,False,True,450)
    heroes["Viper"]=Hero("Viper",MainStat.AGILITY,False,True,575)
    heroes["Weaver"]=Hero("Weaver",MainStat.AGILITY,False,True,425)
    #Intelligence Heroes
    heroes["Ancient Apparition"]=Hero("Ancient Apparition",MainStat.INTELLIGENCE,False,True,675)
    heroes["Bane"]=Hero("Bane",MainStat.INTELLIGENCE,False,True,400)
    heroes["Batrider"]=Hero("Batrider",MainStat.INTELLIGENCE,False,True,375)
    heroes["Chen"]=Hero("Chen",MainStat.INTELLIGENCE,False,True,650)
    heroes["Crystal Maiden"]=Hero("Crystal Maiden",MainStat.INTELLIGENCE,False,True,600)
    heroes["Dark Seer"]=Hero("Dark Seer",MainStat.INTELLIGENCE,True,True,150)
    heroes["Dark Willow"]=Hero("Dark Willow",MainStat.INTELLIGENCE,False,False,475)
    heroes["Dazzle"]=Hero("Dazzle",MainStat.INTELLIGENCE,False,True,550)
    heroes["Death Prophet"]=Hero("Death Prophet",MainStat.INTELLIGENCE,False,False,600)
    heroes["Disruptor"]=Hero("Disruptor",MainStat.INTELLIGENCE,False,True,600)
    heroes["Enchantress"]=Hero("Enchantress",MainStat.INTELLIGENCE,False,True,550)
    heroes["Enigma"]=Hero("Enigma",MainStat.INTELLIGENCE,False,True,500)
    heroes["Invoker"]=Hero("Invoker",MainStat.INTELLIGENCE,False,True,600)
    heroes["Jakiro"]=Hero("Jakiro",MainStat.INTELLIGENCE,False,True,400)
    heroes["Keeper of the Light"]=Hero("Keeper of the Light",MainStat.INTELLIGENCE,False,True,600)
    heroes["Leshrac"]=Hero("Leshrac",MainStat.INTELLIGENCE,False,True,600)
    heroes["Lich"]=Hero("Lich",MainStat.INTELLIGENCE,False,True,550)
    heroes["Lina"]=Hero("Lina",MainStat.INTELLIGENCE,False,True,670)
    heroes["Lion"]=Hero("Lion",MainStat.INTELLIGENCE,False,True,600)
    heroes["Nature's Prophet"]=Hero("Nature's Prophet",MainStat.INTELLIGENCE,False,True,600)
    heroes["Necrophos"]=Hero("Necrophos",MainStat.INTELLIGENCE,False,True,550)
    heroes["Ogre Magi"]=Hero("Ogre Magi",MainStat.INTELLIGENCE,True,True,150)
    heroes["Oracle"]=Hero("Oracle",MainStat.INTELLIGENCE,False,True,620)
    heroes["Outworld Devourer"]=Hero("Outworld Devourer",MainStat.INTELLIGENCE,False,True,450)
    heroes["Puck"]=Hero("Puck",MainStat.INTELLIGENCE,False,True,550)
    heroes["Pugna"]=Hero("Pugna",MainStat.INTELLIGENCE,False,True,630)
    heroes["Queen of Pain"]=Hero("Queen of Pain",MainStat.INTELLIGENCE,False,True,550)
    heroes["Rubick"]=Hero("Rubick",MainStat.INTELLIGENCE,False,True,550)
    heroes["Shadow Demon"]=Hero("Shadow Demon",MainStat.INTELLIGENCE,False,True,500)
    heroes["Shadow Shaman"]=Hero("Shadow Shaman",MainStat.INTELLIGENCE,False,True,400)
    heroes["Silencer"]=Hero("Silencer",MainStat.INTELLIGENCE,False,True,600)
    heroes["Skywrath Mage"]=Hero("Skywrath Mage",MainStat.INTELLIGENCE,False,True,600)
    heroes["Storm Spirit"]=Hero("Storm Spirit",MainStat.INTELLIGENCE,False,True,480)
    heroes["Techies"]=Hero("Techies",MainStat.INTELLIGENCE,False,True,700)
    heroes["Tinker"]=Hero("Tinker",MainStat.INTELLIGENCE,False,True,500)
    heroes["Visage"]=Hero("Visage",MainStat.INTELLIGENCE,False,True,600)
    heroes["Warlock"]=Hero("Warlock",MainStat.INTELLIGENCE,False,True,600)
    heroes["Windranger"]=Hero("Windranger",MainStat.INTELLIGENCE,False,True,600)
    heroes["Winter Wyvern"]=Hero("Winter Wyvern",MainStat.INTELLIGENCE,False,True,425)
    heroes["Witch Doctor"]=Hero("Witch Doctor",MainStat.INTELLIGENCE,False,True,600)
    heroes["Zeus"]=Hero("Zeus",MainStat.INTELLIGENCE,False,True,350)
    
    self.heroes = heroes
    
def buildItemTables(self):
    items = dict()
    boots = dict()
    
    #Common
    items["Moon Shard"]=Item("Moon Shard", 4000, [ItemTags.CONSUMABLE])
    #Support
    items["Vladmir's Offering"]=Item("Vladmir's Offering", 2250, [])
    items["Spirit Vessel"]=Item("Spirit Vessel", 2975, [ItemTags.ACTIVE])
    items["Pipe of Insight"]=Item("Pipe of Insight", 3150, [ItemTags.ACTIVE, ItemTags.DEFENSIVE])
    #Caster
    items["Veil of Discord"]=Item("Veil of Discord", 2330, [ItemTags.ACTIVE, ItemTags.OFFENSIVE])
    items["Solar Crest"]=Item("Solar Crest", 2625, [ItemTags.ACTIVE, ItemTags.DEFENSIVE])
    items["Nullifier"]=Item("Nullifier", 4700, [ItemTags.ACTIVE, ItemTags.OFFENSIVE])
    items["Octarine Core"]=Item("Octarine Core", 5900, [])
    items["Scythe of Vyse"]=Item("Scythe of Vyse", 5700, [ItemTags.ACTIVE, ItemTags.OFFENSIVE])
    items["Aghanim's Scepter"]=Item("Aghanim's Scepter", 4200, [])
    items["Eul's Scepter of Divinity"]=Item("Eul's Scepter of Divinity", 2750, [ItemTags.ACTIVE])
    items["Necronomicon"]=Item("Necronomicon", 5000, [ItemTags.ACTIVE, ItemTags.OFFENSIVE])
    items["Refresher Orb"]=Item("Refresher Orb", 5200, [ItemTags.ACTIVE])
    items["Dagon"]=Item("Dagon", 7715, [ItemTags.ACTIVE, ItemTags.OFFENSIVE])
    items["Aether Lens"]=Item("Aether Lens", 2350, [])
    #Armor
    items["Blade Mail"]=Item("Blade Mail", 2200, [ItemTags.ACTIVE, ItemTags.DEFENSIVE])
    items["Aeon Disk"]=Item("Aeon Disk", 3350, [ItemTags.DEFENSIVE])
    items["Crimson Guard"]=Item("Crimson Guard", 3550, [ItemTags.ACTIVE, ItemTags.DEFENSIVE])
    items["Black King Bar"]=Item("Black King Bar", 3975, [ItemTags.ACTIVE])
    items["Lotus Orb"]=Item("Lotus Orb", 4000, [ItemTags.ACTIVE, ItemTags.DEFENSIVE])
    items["Hurricane Pike"]=Item("Hurricane Pike", 4615, [ItemTags.ACTIVE])
    items["Shiva's Guard"]=Item("Shiva's Guard", 4750, [ItemTags.ACTIVE])
    items["Bloodstone"]=Item("Bloodstone", 4900, [ItemTags.ACTIVE])
    items["Manta Style"]=Item("Manta Style", 5000, [ItemTags.ACTIVE])
    items["Linken's Sphere"]=Item("Linken's Sphere", 5050, [ItemTags.ACTIVE, ItemTags.DEFENSIVE])
    items["Heart of Tarrasque"]=Item("Heart of Tarrasque", 5200, [ItemTags.DEFENSIVE])
    items["Assault Cuirass"]=Item("Assault Cuirass", 5250, [])
    #Weapons
    items["Armlet of Mordiggian"]=Item("Armlet of Mordiggian", 2370, [ItemTags.ACTIVE])
    items["Meteor Hammer"]=Item("Meteor Hammer", 2625, [ItemTags.ACTIVE])
    items["Battle Fury"]=Item("Battle Fury", 4100, [ItemTags.ACTIVE])
    items["Monkey King Bar"]=Item("Monkey King Bar", 4200, [ItemTags.OFFENSIVE])
    items["Ethereal Blade"]=Item("Ethereal Blade", 4700, [ItemTags.ACTIVE])
    items["Radiance"]=Item("Radiance", 5150, [ItemTags.ACTIVE])
    items["Daedalus"]=Item("Daedalus", 5320, [ItemTags.OFFENSIVE])
    items["Butterfly"]=Item("Butterfly", 5525, [ItemTags.ACTIVE])
    items["Silver Edge"]=Item("Silver Edge", 5550, [ItemTags.ACTIVE])
    items["Abyssal Blade"]=Item("Abyssal Blade", 6400, [ItemTags.ACTIVE, ItemTags.OFFENSIVE])
    items["Bloodthorn"]=Item("Bloodthorn", 7195, [ItemTags.ACTIVE, ItemTags.OFFENSIVE])
    #Artifacts
    items["Kaya"]=Item("Kaya", 1950, [ItemTags.OFFENSIVE])
    items["Mask of Madness"]=Item("Mask of Madness", 1975, [ItemTags.ACTIVE, ItemTags.OFFENSIVE])
    items["Echo Saber"]=Item("Echo Saber", 2650, [ItemTags.OFFENSIVE])
    items["Diffusal Blade"]=Item("Diffusal Blade", 3150, [ItemTags.ACTIVE, ItemTags.OFFENSIVE])
    items["Heaven's Halberd"]=Item("Heaven's Halberd", 3400, [ItemTags.ACTIVE, ItemTags.DEFENSIVE])
    items["Desolator"]=Item("Desolator", 3500, [ItemTags.OFFENSIVE])
    items["Sange and Yasha"]=Item("Sange and Yasha", 3900, [ItemTags.OFFENSIVE])
    items["Eye of Skadi"]=Item("Eye of Skadi", 5500, [ItemTags.OFFENSIVE])
    items["Satanic"]=Item("Satanic", 5500, [ItemTags.ACTIVE, ItemTags.DEFENSIVE])
    
    #Boots
    boots["Guardian Greaves"]=Item("Guardian Greaves",5350, [ItemTags.BOOTS, ItemTags.ACTIVE, ItemTags.DEFENSIVE])
    boots["Power Treads"]=Item("Power Treads",1350, [ItemTags.BOOTS])
    boots["Phase Boots"]=Item("Phase Boots",1240, [ItemTags.BOOTS, ItemTags.ACTIVE])
    boots["Tranquil Boots"]=Item("Tranquil Boots",950, [ItemTags.BOOTS, ItemTags.DEFENSIVE])
    boots["Boots of Travel"]=Item("Boots of Travel",4400, [ItemTags.BOOTS, ItemTags.ACTIVE])
    
    self.items = items
    self.boots = boots

class Handicap:
    def __init__(self, value, text, exclusive, inclusive):
        self.value = value
        self.text = text
        self.exclusive = exclusive
        self.inclusive = inclusive
    
def buildHandicaps(self):
    handicaps = list()
    
    handicaps.append(Handicap(1, "1 Random item.", [], []))
    handicaps.append(Handicap(1, "You must start the game with brown boots.", [], []))
    handicaps.append(Handicap(1, "No denying.", [], []))
    handicaps.append(Handicap(2, "No TPs (BoTs available).", [], []))
    handicaps.append(Handicap(2, "No lane CS before 10 minutes.", [], []))
    handicaps.append(Handicap(2, "No defensive items.", [], []))
    handicaps.append(Handicap(2, "No offensive items.", [], []))
    handicaps.append(Handicap(2, "You must buy a divine rapier as your first or second full item.", [], []))
    handicaps.append(Handicap(3, "Random hero.", [], []))
    handicaps.append(Handicap(3, "No regen consumables (You CAN buy a bottle).", [], []))
    handicaps.append(Handicap(3, "No jungle CS the entire game.", [], []))
    handicaps.append(Handicap(3, "No talents.", [], []))
    handicaps.append(Handicap(3, "No boots.", [], []))
    handicaps.append(Handicap(3, "You can't buy items that give your main stat.", [], []))
    handicaps.append(Handicap(4, "No lane CS before 20 minutes.", [], []))
    handicaps.append(Handicap(6, "No TPs, No BoTs.", [], []))
    handicaps.append(Handicap(6, "No ultimate.", [], []))
    
    self.handicaps = handicaps